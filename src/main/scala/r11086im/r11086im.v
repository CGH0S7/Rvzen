// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
`ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
`define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

        // VCS coverage exclude_file
        module regfile_32x32(
                input  [4:0]  R0_addr,
                input         R0_en,
                R0_clk,
                output [31:0] R0_data,
                input  [4:0]  R1_addr,
                input         R1_en,
                R1_clk,
                output [31:0] R1_data,
                input  [4:0]  R2_addr,
                input         R2_en,
                R2_clk,
                output [31:0] R2_data,
                input  [4:0]  W0_addr,
                input         W0_en,
                W0_clk,
                input  [31:0] W0_data
            );

            reg [31:0] Memory[0:31];
            always @(posedge W0_clk) begin
                if (W0_en & 1'h1)
                    Memory[W0_addr] <= W0_data;
            end // always @(posedge)
            assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
            assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;
            assign R2_data = R2_en ? Memory[R2_addr] : 32'bx;
        endmodule

        // VCS coverage exclude_file
        module csr_regfile_4096x32(
                input  [11:0] R0_addr,
                input         R0_en,
                R0_clk,
                output [31:0] R0_data,
                input  [11:0] R1_addr,
                input         R1_en,
                R1_clk,
                output [31:0] R1_data,
                input  [11:0] W0_addr,
                input         W0_en,
                W0_clk,
                input  [31:0] W0_data
            );

            reg [31:0] Memory[0:4095];
            always @(posedge W0_clk) begin
                if (W0_en & 1'h1)
                    Memory[W0_addr] <= W0_data;
            end // always @(posedge)
            assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
            assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;
        endmodule

        module Core(
                input         clock,
                reset,
                output [31:0] io_imem_addr,
                input  [31:0] io_imem_inst,
                output [31:0] io_dmem_addr,
                input  [31:0] io_dmem_rdata,
                output        io_dmem_wen,
                output [31:0] io_dmem_wdata,
                output        io_exit,
                output [31:0] io_gp
            );

            wire [31:0]       _csr_regfile_ext_R0_data;
            wire [31:0]       _csr_regfile_ext_R1_data;
            wire [31:0]       _regfile_ext_R0_data;
            wire [31:0]       _regfile_ext_R1_data;
            reg  [31:0]       pc_reg;
            wire [31:0]       _pc_plus4_T = pc_reg + 32'h4;
            wire [9:0]        _GEN = {io_imem_inst[14:12], io_imem_inst[6:0]};
            wire [31:0]       rs1_data = (|(io_imem_inst[19:15])) ? _regfile_ext_R1_data : 32'h0;
            wire [31:0]       rs2_data = (|(io_imem_inst[24:20])) ? _regfile_ext_R0_data : 32'h0;
            wire              _csignals_T_1 = _GEN == 10'h103;
            wire              _csignals_T_3 = _GEN == 10'h123;
            wire [16:0]       _GEN_0 =
                 {io_imem_inst[31:25], io_imem_inst[14:12], io_imem_inst[6:0]};
            wire              _csignals_T_5 = _GEN_0 == 17'h33;
            wire              _csignals_T_7 = _GEN == 10'h13;
            wire              _csignals_T_9 = _GEN_0 == 17'h8033;
            wire              _csignals_T_11 = _GEN_0 == 17'h3B3;
            wire              _csignals_T_13 = _GEN_0 == 17'h333;
            wire              _csignals_T_15 = _GEN_0 == 17'h233;
            wire              _csignals_T_17 = _GEN == 10'h393;
            wire              _csignals_T_19 = _GEN == 10'h313;
            wire              _csignals_T_21 = _GEN == 10'h213;
            wire              _csignals_T_23 = _GEN_0 == 17'hB3;
            wire              _csignals_T_25 = _GEN_0 == 17'h2B3;
            wire              _csignals_T_27 = _GEN_0 == 17'h82B3;
            wire              _csignals_T_29 = _GEN_0 == 17'h93;
            wire              _csignals_T_31 = _GEN_0 == 17'h293;
            wire              _csignals_T_33 = _GEN_0 == 17'h8293;
            wire              _csignals_T_35 = _GEN_0 == 17'h133;
            wire              _csignals_T_37 = _GEN_0 == 17'h1B3;
            wire              _csignals_T_39 = _GEN == 10'h113;
            wire              _csignals_T_41 = _GEN == 10'h193;
            wire              _csignals_T_43 = _GEN == 10'h63;
            wire              _csignals_T_45 = _GEN == 10'hE3;
            wire              _csignals_T_47 = _GEN == 10'h2E3;
            wire              _csignals_T_49 = _GEN == 10'h3E3;
            wire              _csignals_T_51 = _GEN == 10'h263;
            wire              _csignals_T_53 = _GEN == 10'h363;
            wire              _csignals_T_55 = io_imem_inst[6:0] == 7'h6F;
            wire              _csignals_T_57 = _GEN == 10'h67;
            wire              _csignals_T_59 = io_imem_inst[6:0] == 7'h37;
            wire              _csignals_T_61 = io_imem_inst[6:0] == 7'h17;
            wire              _csignals_T_63 = _GEN == 10'hF3;
            wire              _csignals_T_65 = _GEN == 10'h2F3;
            wire              _csignals_T_67 = _GEN == 10'h173;
            wire              _csignals_T_69 = _GEN == 10'h373;
            wire              _csignals_T_71 = _GEN == 10'h1F3;
            wire              _csignals_T_73 = _GEN == 10'h3F3;
            wire              _csignals_T_75 = io_imem_inst == 32'h73;
            wire              _csignals_T_77 = _GEN_0 == 17'h433;
            wire              _csignals_T_79 = _GEN_0 == 17'h633;
            wire              _csignals_T_81 = _GEN_0 == 17'h4B3;
            wire              _csignals_T_83 = _GEN_0 == 17'h533;
            wire              _csignals_T_85 = _GEN_0 == 17'h5B3;
            wire              _csignals_T_87 = _GEN_0 == 17'h6B3;
            wire              _csignals_T_89 = _GEN_0 == 17'h733;
            wire              _csignals_T_91 = _GEN_0 == 17'h7B3;
            wire              _GEN_1 = _csignals_T_71 | _csignals_T_73;
            wire              _GEN_2 =
                              _csignals_T_63 | _csignals_T_65 | _csignals_T_67 | _csignals_T_69 | _GEN_1;
            wire              _GEN_3 = _csignals_T_59 | _csignals_T_61;
            wire [4:0]        csignals_0 =
                 _csignals_T_1 | _csignals_T_3 | _csignals_T_5 | _csignals_T_7
                 ? 5'h1
                 : _csignals_T_9
                 ? 5'h2
                 : _csignals_T_11
                 ? 5'h3
                 : _csignals_T_13
                 ? 5'h4
                 : _csignals_T_15
                 ? 5'h5
                 : _csignals_T_17
                 ? 5'h3
                 : _csignals_T_19
                 ? 5'h4
                 : _csignals_T_21
                 ? 5'h5
                 : _csignals_T_23
                 ? 5'h6
                 : _csignals_T_25
                 ? 5'h7
                 : _csignals_T_27
                 ? 5'h8
                 : _csignals_T_29
                 ? 5'h6
                 : _csignals_T_31
                 ? 5'h7
                 : _csignals_T_33
                 ? 5'h8
                 : _csignals_T_35
                 ? 5'h9
                 : _csignals_T_37
                 ? 5'hA
                 : _csignals_T_39
                 ? 5'h9
                 : _csignals_T_41
                 ? 5'hA
                 : _csignals_T_43
                 ? 5'hB
                 : _csignals_T_45
                 ? 5'hC
                 : _csignals_T_47
                 ? 5'hD
                 : _csignals_T_49
                 ? 5'hE
                 : _csignals_T_51
                 ? 5'hF
                 : _csignals_T_53
                 ? 5'h10
                 : _csignals_T_55
                 ? 5'h1
                 : _csignals_T_57
                 ? 5'h11
                 : _GEN_3
                 ? 5'h1
                 : _GEN_2
                 ? 5'h12
                 : _csignals_T_75
                 ? 5'h0
                 : _csignals_T_77
                 ? 5'h17
                 : _csignals_T_79
                 ? 5'h18
                 : _csignals_T_81
                 ? 5'h19
                 : _csignals_T_83
                 ? 5'h1A
                 : _csignals_T_85
                 ? 5'h1B
                 : _csignals_T_87
                 ? 5'h1C
                 : _csignals_T_89
                 ? 5'h1D
                 : _csignals_T_91
                 ? 5'h1E
                 : 5'h0;
            wire              _GEN_4 =
                              _csignals_T_43 | _csignals_T_45 | _csignals_T_47 | _csignals_T_49 | _csignals_T_51
                              | _csignals_T_53;
            wire              _GEN_5 =
                              _csignals_T_3 | _csignals_T_5 | _csignals_T_7 | _csignals_T_9 | _csignals_T_11
                              | _csignals_T_13 | _csignals_T_15 | _csignals_T_17 | _csignals_T_19 | _csignals_T_21
                              | _csignals_T_23 | _csignals_T_25 | _csignals_T_27 | _csignals_T_29 | _csignals_T_31
                              | _csignals_T_33 | _csignals_T_35 | _csignals_T_37 | _csignals_T_39 | _csignals_T_41
                              | _GEN_4;
            wire [1:0]        csignals_1 =
                 _csignals_T_1 | _GEN_5
                 ? 2'h0
                 : _csignals_T_55
                 ? 2'h1
                 : _csignals_T_57
                 ? 2'h0
                 : _csignals_T_59
                 ? 2'h2
                 : _csignals_T_61
                 ? 2'h1
                 : _csignals_T_63
                 ? 2'h0
                 : _csignals_T_65
                 ? 2'h3
                 : _csignals_T_67
                 ? 2'h0
                 : _csignals_T_69
                 ? 2'h3
                 : _csignals_T_71
                 ? 2'h0
                 : _csignals_T_73
                 ? 2'h3
                 : {_csignals_T_75, 1'h0};
            wire              _GEN_6 = _csignals_T_39 | _csignals_T_41;
            wire [2:0]        csignals_6 =
                 _csignals_T_1 | _csignals_T_3 | _csignals_T_5 | _csignals_T_7 | _csignals_T_9
                 | _csignals_T_11 | _csignals_T_13 | _csignals_T_15 | _csignals_T_17 | _csignals_T_19
                 | _csignals_T_21 | _csignals_T_23 | _csignals_T_25 | _csignals_T_27 | _csignals_T_29
                 | _csignals_T_31 | _csignals_T_33 | _csignals_T_35 | _csignals_T_37 | _csignals_T_39
                 | _csignals_T_41 | _csignals_T_43 | _csignals_T_45 | _csignals_T_47 | _csignals_T_49
                 | _csignals_T_51 | _csignals_T_53 | _csignals_T_55 | _csignals_T_57 | _GEN_3
                 ? 3'h0
                 : _csignals_T_63 | _csignals_T_65
                 ? 3'h1
                 : _csignals_T_67 | _csignals_T_69
                 ? 3'h2
                 : _GEN_1 ? 3'h3 : {_csignals_T_75, 2'h0};
            wire [31:0]       op1_data =
                 csignals_1 == 2'h0 ? rs1_data : csignals_1 == 2'h1 ? pc_reg : 32'h0;
            wire [7:0][31:0]  _GEN_7 =
                 {{32'h0},
                  {32'h0},
                  {{io_imem_inst[31:12], 12'h0}},
                  {{{12{io_imem_inst[31]}},
                    io_imem_inst[19:12],
                    io_imem_inst[20],
                    io_imem_inst[30:21],
                    1'h0}},
                  {{8'h0, {12{io_imem_inst[31]}}, io_imem_inst[31:25], io_imem_inst[11:7]}},
                  {{{20{io_imem_inst[31]}}, io_imem_inst[31:20]}},
                  {rs2_data},
                  {32'h0}};
            wire [31:0]       op2_data =
                 _GEN_7[_csignals_T_1
                        ? 3'h2
                        : _csignals_T_3
                        ? 3'h3
                        : _csignals_T_5
                        ? 3'h1
                        : _csignals_T_7
                        ? 3'h2
                        : _csignals_T_9 | _csignals_T_11 | _csignals_T_13
                        | _csignals_T_15
                        ? 3'h1
                        : _csignals_T_17 | _csignals_T_19 | _csignals_T_21
                        ? 3'h2
                        : _csignals_T_23 | _csignals_T_25 | _csignals_T_27
                        ? 3'h1
                        : _csignals_T_29 | _csignals_T_31 | _csignals_T_33
                        ? 3'h2
                        : _csignals_T_35 | _csignals_T_37
                        ? 3'h1
                        : _GEN_6
                        ? 3'h2
                        : _GEN_4
                        ? 3'h1
                        : _csignals_T_55
                        ? 3'h4
                        : _csignals_T_57
                        ? 3'h2
                        : _GEN_3
                        ? 3'h5
                        : {2'h0,
                           ~(_csignals_T_63
                             | _csignals_T_65
                             | _csignals_T_67
                             | _csignals_T_69
                             | _csignals_T_71
                             | _csignals_T_73
                             | _csignals_T_75)}];
            wire [31:0]       _alu_out_T_31 = op1_data + op2_data;
            wire [62:0]       _alu_out_T_14 = {31'h0, op1_data} << op2_data[4:0];
            wire [31:0]       _GEN_8 = {27'h0, op2_data[4:0]};
            wire              _br_flg_T_17 = op1_data < op2_data;
            wire [63:0]       _GEN_9 = {32'h0, op2_data};
            wire [63:0]       _alu_out_T_53 = {32'h0, op1_data} * _GEN_9;
            wire [31:0]       _alu_out_T_56 = op1_data / op2_data;
            wire [63:0]       _GEN_10 = {{32{op1_data[31]}}, op1_data};
            wire [63:0]       _alu_out_T_43 = _GEN_10 * {{32{op2_data[31]}}, op2_data};
            wire [63:0]       _alu_out_T_48 = _GEN_10 * _GEN_9;
            wire [31:0]       _alu_out_T_60 = op1_data % op2_data;
            wire [31:0][31:0] _GEN_11 =
                 {{32'h0},
                  {_alu_out_T_60},
                  {_alu_out_T_60},
                  {_alu_out_T_56},
                  {_alu_out_T_53[63:32]},
                  {_alu_out_T_48[63:32]},
                  {_alu_out_T_43[63:32]},
                  {_alu_out_T_56},
                  {_alu_out_T_53[31:0]},
                  {32'h0},
                  {32'h0},
                  {32'h0},
                  {32'h0},
                  {op1_data},
                  {_alu_out_T_31 & 32'hFFFFFFFE},
                  {32'h0},
                  {32'h0},
                  {32'h0},
                  {32'h0},
                  {32'h0},
                  {32'h0},
                  {{31'h0, _br_flg_T_17}},
                  {{31'h0, $signed(op1_data) < $signed(op2_data)}},
                  {$signed($signed(op1_data) >>> _GEN_8)},
                  {op1_data >> _GEN_8},
                  {_alu_out_T_14[31:0]},
                  {op1_data ^ op2_data},
                  {op1_data | op2_data},
                  {op1_data & op2_data},
                  {op1_data - op2_data},
                  {_alu_out_T_31},
                  {32'h0}};
            wire              _csr_wdata_T_6 = csignals_6 == 3'h4;
            wire [11:0]       csr_addr = _csr_wdata_T_6 ? 12'h342 : io_imem_inst[31:20];
            wire [3:0][31:0]  _GEN_12 =
                 {{_csr_regfile_ext_R1_data}, {_pc_plus4_T}, {io_dmem_rdata}, {_GEN_11[csignals_0]}};
            wire [31:0]       wb_data =
                 _GEN_12[_csignals_T_1
                         ? 2'h1
                         : _GEN_5
                         ? 2'h0
                         : _csignals_T_55 | _csignals_T_57
                         ? 2'h2
                         : _GEN_3 | ~_GEN_2 ? 2'h0 : 2'h3];
            `ifndef SYNTHESIS
                    always @(posedge clock) begin
                        if ((`PRINTF_COND_) & ~reset) begin
                            $fwrite(32'h80000002, "---------------\n");
                            $fwrite(32'h80000002, "io.pc: 0x%x\ninst: 0x%x \n", pc_reg, io_imem_inst);
                            $fwrite(32'h80000002, "rs1_addr: 0x%x\n", io_imem_inst[19:15]);
                            $fwrite(32'h80000002, "wb_addr: 0x%x\n", io_imem_inst[11:7]);
                            $fwrite(32'h80000002, "rs1_data: 0x%x\n", rs1_data);
                            $fwrite(32'h80000002, "wb_data: 0x%x\n", wb_data);
                            $fwrite(32'h80000002, "---------------\n");
                        end
                    end // always @(posedge)
`endif // not def SYNTHESIS
                    always @(posedge clock) begin
                        if (reset)
                            pc_reg <= 32'h0;
                        else begin
                            automatic logic _br_flg_T_3 = op1_data == op2_data;
                            if (csignals_0 == 5'hB
                                    ? _br_flg_T_3
                                    : csignals_0 == 5'hC
                                    ? ~_br_flg_T_3
                                    : csignals_0 == 5'hD
                                    ? $signed(op1_data) < $signed(op2_data)
                                    : csignals_0 == 5'hE
                                    ? $signed(op1_data) >= $signed(op2_data)
                                    : csignals_0 == 5'hF
                                    ? _br_flg_T_17
                                    : csignals_0 == 5'h10 & ~_br_flg_T_17)
                                pc_reg <=
                                       pc_reg
                                       + {{20{io_imem_inst[31]}},
                                          io_imem_inst[7],
                                          io_imem_inst[30:25],
                                          io_imem_inst[11:8],
                                          1'h0};
                            else if (io_imem_inst[6:0] == 7'h6F | _GEN == 10'h67)
                                pc_reg <= _GEN_11[csignals_0];
                            else if (io_imem_inst == 32'h73)
                                pc_reg <= _csr_regfile_ext_R0_data;
                            else
                                pc_reg <= _pc_plus4_T;
                        end
                    end // always @(posedge)
                    regfile_32x32 regfile_ext (
                                      .R0_addr (io_imem_inst[24:20]),
                                      .R0_en   (1'h1),
                                      .R0_clk  (clock),
                                      .R0_data (_regfile_ext_R0_data),
                                      .R1_addr (io_imem_inst[19:15]),
                                      .R1_en   (1'h1),
                                      .R1_clk  (clock),
                                      .R1_data (_regfile_ext_R1_data),
                                      .R2_addr (5'h3),
                                      .R2_en   (1'h1),
                                      .R2_clk  (clock),
                                      .R2_data (io_gp),
                                      .W0_addr (io_imem_inst[11:7]),
                                      .W0_en
                                      ((_csignals_T_1
                                        ? 2'h1
                                        : _csignals_T_3
                                        ? 2'h0
                                        : _csignals_T_5 | _csignals_T_7 | _csignals_T_9 | _csignals_T_11
                                        | _csignals_T_13 | _csignals_T_15 | _csignals_T_17 | _csignals_T_19
                                        | _csignals_T_21 | _csignals_T_23 | _csignals_T_25 | _csignals_T_27
                                        | _csignals_T_29 | _csignals_T_31 | _csignals_T_33 | _csignals_T_35
                                        | _csignals_T_37 | _GEN_6
                                        ? 2'h1
                                        : _GEN_4
                                        ? 2'h0
                                        : _csignals_T_55 | _csignals_T_57 | _csignals_T_59 | _csignals_T_61
                                        | _GEN_2
                                        ? 2'h1
                                        : _csignals_T_75
                                        ? 2'h0
                                        : {1'h0,
                                           _csignals_T_77 | _csignals_T_79 | _csignals_T_81
                                           | _csignals_T_83 | _csignals_T_85 | _csignals_T_87
                                           | _csignals_T_89 | _csignals_T_91}) == 2'h1),
                                      .W0_clk  (clock),
                                      .W0_data (wb_data)
                                  );
            csr_regfile_4096x32 csr_regfile_ext (
                                    .R0_addr (12'h305),
                                    .R0_en   (1'h1),
                                    .R0_clk  (clock),
                                    .R0_data (_csr_regfile_ext_R0_data),
                                    .R1_addr (csr_addr),
                                    .R1_en   (1'h1),
                                    .R1_clk  (clock),
                                    .R1_data (_csr_regfile_ext_R1_data),
                                    .W0_addr (csr_addr),
                                    .W0_en   (|csignals_6),
                                    .W0_clk  (clock),
                                    .W0_data
                                    (csignals_6 == 3'h1
                                     ? op1_data
                                     : csignals_6 == 3'h2
                                     ? _csr_regfile_ext_R1_data | op1_data
                                     : csignals_6 == 3'h3
                                     ? _csr_regfile_ext_R1_data & ~op1_data
                                     : _csr_wdata_T_6 ? 32'hB : 32'h0)
                                );
            assign io_imem_addr = pc_reg;
            assign io_dmem_addr = _GEN_11[csignals_0];
            assign io_dmem_wen = ~_csignals_T_1 & _csignals_T_3;
            assign io_dmem_wdata = rs2_data;
            assign io_exit = io_imem_inst == 32'hC0001073;
        endmodule

        // VCS coverage exclude_file
        module mem_16384x8(
                input  [13:0] R0_addr,
                input         R0_en,
                R0_clk,
                output [7:0]  R0_data,
                input  [13:0] R1_addr,
                input         R1_en,
                R1_clk,
                output [7:0]  R1_data,
                input  [13:0] R2_addr,
                input         R2_en,
                R2_clk,
                output [7:0]  R2_data,
                input  [13:0] R3_addr,
                input         R3_en,
                R3_clk,
                output [7:0]  R3_data,
                input  [13:0] R4_addr,
                input         R4_en,
                R4_clk,
                output [7:0]  R4_data,
                input  [13:0] R5_addr,
                input         R5_en,
                R5_clk,
                output [7:0]  R5_data,
                input  [13:0] R6_addr,
                input         R6_en,
                R6_clk,
                output [7:0]  R6_data,
                input  [13:0] R7_addr,
                input         R7_en,
                R7_clk,
                output [7:0]  R7_data,
                input  [13:0] W0_addr,
                input         W0_en,
                W0_clk,
                input  [7:0]  W0_data,
                input  [13:0] W1_addr,
                input         W1_en,
                W1_clk,
                input  [7:0]  W1_data,
                input  [13:0] W2_addr,
                input         W2_en,
                W2_clk,
                input  [7:0]  W2_data,
                input  [13:0] W3_addr,
                input         W3_en,
                W3_clk,
                input  [7:0]  W3_data
            );

            reg [7:0] Memory[0:16383];
            always @(posedge W0_clk) begin
                if (W0_en & 1'h1)
                    Memory[W0_addr] <= W0_data;
                if (W1_en & 1'h1)
                    Memory[W1_addr] <= W1_data;
                if (W2_en & 1'h1)
                    Memory[W2_addr] <= W2_data;
                if (W3_en & 1'h1)
                    Memory[W3_addr] <= W3_data;
            end // always @(posedge)
`ifdef ENABLE_INITIAL_MEM_
            initial
                $readmemh("src/hex/ctest.hex", Memory);
`endif // ENABLE_INITIAL_MEM_

            assign R0_data = R0_en ? Memory[R0_addr] : 8'bx;
            assign R1_data = R1_en ? Memory[R1_addr] : 8'bx;
            assign R2_data = R2_en ? Memory[R2_addr] : 8'bx;
            assign R3_data = R3_en ? Memory[R3_addr] : 8'bx;
            assign R4_data = R4_en ? Memory[R4_addr] : 8'bx;
            assign R5_data = R5_en ? Memory[R5_addr] : 8'bx;
            assign R6_data = R6_en ? Memory[R6_addr] : 8'bx;
            assign R7_data = R7_en ? Memory[R7_addr] : 8'bx;
        endmodule

        module Memory(
                input         clock,
                input  [31:0] io_imem_addr,
                output [31:0] io_imem_inst,
                input  [31:0] io_dmem_addr,
                output [31:0] io_dmem_rdata,
                input         io_dmem_wen,
                input  [31:0] io_dmem_wdata
            );

            wire [7:0]  _mem_ext_R0_data;
            wire [7:0]  _mem_ext_R1_data;
            wire [7:0]  _mem_ext_R2_data;
            wire [7:0]  _mem_ext_R3_data;
            wire [7:0]  _mem_ext_R4_data;
            wire [7:0]  _mem_ext_R5_data;
            wire [7:0]  _mem_ext_R6_data;
            wire [7:0]  _mem_ext_R7_data;
            wire [13:0] _io_dmem_rdata_T = io_dmem_addr[13:0] + 14'h3;
            wire [13:0] _io_dmem_rdata_T_3 = io_dmem_addr[13:0] + 14'h2;
            wire [13:0] _io_dmem_rdata_T_6 = io_dmem_addr[13:0] + 14'h1;
            mem_16384x8 mem_ext (
                            .R0_addr (io_imem_addr[13:0]),
                            .R0_en   (1'h1),
                            .R0_clk  (clock),
                            .R0_data (_mem_ext_R0_data),
                            .R1_addr (io_imem_addr[13:0] + 14'h1),
                            .R1_en   (1'h1),
                            .R1_clk  (clock),
                            .R1_data (_mem_ext_R1_data),
                            .R2_addr (io_imem_addr[13:0] + 14'h2),
                            .R2_en   (1'h1),
                            .R2_clk  (clock),
                            .R2_data (_mem_ext_R2_data),
                            .R3_addr (io_imem_addr[13:0] + 14'h3),
                            .R3_en   (1'h1),
                            .R3_clk  (clock),
                            .R3_data (_mem_ext_R3_data),
                            .R4_addr (io_dmem_addr[13:0]),
                            .R4_en   (1'h1),
                            .R4_clk  (clock),
                            .R4_data (_mem_ext_R4_data),
                            .R5_addr (_io_dmem_rdata_T_6),
                            .R5_en   (1'h1),
                            .R5_clk  (clock),
                            .R5_data (_mem_ext_R5_data),
                            .R6_addr (_io_dmem_rdata_T_3),
                            .R6_en   (1'h1),
                            .R6_clk  (clock),
                            .R6_data (_mem_ext_R6_data),
                            .R7_addr (_io_dmem_rdata_T),
                            .R7_en   (1'h1),
                            .R7_clk  (clock),
                            .R7_data (_mem_ext_R7_data),
                            .W0_addr (_io_dmem_rdata_T),
                            .W0_en   (io_dmem_wen),
                            .W0_clk  (clock),
                            .W0_data (io_dmem_wdata[31:24]),
                            .W1_addr (_io_dmem_rdata_T_3),
                            .W1_en   (io_dmem_wen),
                            .W1_clk  (clock),
                            .W1_data (io_dmem_wdata[23:16]),
                            .W2_addr (_io_dmem_rdata_T_6),
                            .W2_en   (io_dmem_wen),
                            .W2_clk  (clock),
                            .W2_data (io_dmem_wdata[15:8]),
                            .W3_addr (io_dmem_addr[13:0]),
                            .W3_en   (io_dmem_wen),
                            .W3_clk  (clock),
                            .W3_data (io_dmem_wdata[7:0])
                        );
            assign io_imem_inst =
                   {_mem_ext_R3_data, _mem_ext_R2_data, _mem_ext_R1_data, _mem_ext_R0_data};
            assign io_dmem_rdata =
                   {_mem_ext_R7_data, _mem_ext_R6_data, _mem_ext_R5_data, _mem_ext_R4_data};
        endmodule

        module Top(
                input         clock,
                reset,
                output        io_exit,
                output [31:0] io_gp
            );

            wire [31:0] _memory_io_imem_inst;
            wire [31:0] _memory_io_dmem_rdata;
            wire [31:0] _core_io_imem_addr;
            wire [31:0] _core_io_dmem_addr;
            wire        _core_io_dmem_wen;
            wire [31:0] _core_io_dmem_wdata;
            Core core (
                     .clock         (clock),
                     .reset         (reset),
                     .io_imem_addr  (_core_io_imem_addr),
                     .io_imem_inst  (_memory_io_imem_inst),
                     .io_dmem_addr  (_core_io_dmem_addr),
                     .io_dmem_rdata (_memory_io_dmem_rdata),
                     .io_dmem_wen   (_core_io_dmem_wen),
                     .io_dmem_wdata (_core_io_dmem_wdata),
                     .io_exit       (io_exit),
                     .io_gp         (io_gp)
                 );
            Memory memory (
                       .clock         (clock),
                       .io_imem_addr  (_core_io_imem_addr),
                       .io_imem_inst  (_memory_io_imem_inst),
                       .io_dmem_addr  (_core_io_dmem_addr),
                       .io_dmem_rdata (_memory_io_dmem_rdata),
                       .io_dmem_wen   (_core_io_dmem_wen),
                       .io_dmem_wdata (_core_io_dmem_wdata)
                   );
        endmodule


